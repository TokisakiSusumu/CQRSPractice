@page "/todos"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using SharedKernel.DTOs
@inject NavigationManager Navigation
@inject HttpClient HttpClient
@attribute [Authorize]

<PageTitle>My Todos</PageTitle>

<h1>My Todos</h1>

<div class="mb-3">
    <button class="btn btn-primary" @onclick=@(() => Navigation.NavigateTo("/todos/create"))>
        Add New Todo
    </button>
</div>

@if (todos == null)
{
    <p><em>Loading...</em></p>
}
else if (!todos.Any())
{
    <p>No todos found. Create your first todo!</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Description</th>
                <th>Due Date</th>
                <th>Priority</th>
                <th>Status</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var todo in todos)
            {
                <tr>
                    <td>@todo.Title</td>
                    <td>@todo.Description</td>
                    <td>@todo.DueDate?.ToString("yyyy-MM-dd")</td>
                    <td>@GetPriorityName(todo.Priority)</td>
                    <td>
                        @if (todo.IsCompleted)
                        {
                            <span class="badge bg-success">Completed</span>
                        }
                        else
                        {
                            <span class="badge bg-warning">Pending</span>
                        }
                    </td>
                    <td>
                        @if (!todo.IsCompleted)
                        {
                            <button class="btn btn-sm btn-success" @onclick="() => CompleteTodo(todo.Id)">Complete</button>
                            <button class="btn btn-sm btn-primary" @onclick=@(() => Navigation.NavigateTo($"/todos/edit/{todo.Id}"))>Edit</button>
                        }
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteTodo(todo.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<TodoDto>? todos;

    protected override async Task OnInitializedAsync()
    {
        await LoadTodos();
    }

    private async Task LoadTodos()
    {
        var response = await HttpClient.GetAsync("yardify/todos");
        todos = response.IsSuccessStatusCode ? await response.Content.ReadFromJsonAsync<List<TodoDto>>() : new List<TodoDto>();
    }

    private async Task CompleteTodo(Guid id)
    {
        var response = await HttpClient.PostAsync($"yardify/todos/{id}/complete", null);
        if (response.IsSuccessStatusCode)
            await LoadTodos();
    }

    private async Task DeleteTodo(Guid id)
    {
        var response = await HttpClient.DeleteAsync($"yardify/todos/{id}");
        if (response.IsSuccessStatusCode)
            await LoadTodos();
    }

    private string GetPriorityName(int priority) => priority switch
    {
        1 => "Low",
        2 => "Medium",
        3 => "High",
        _ => "Unknown"
    };
}